"use strict";define([cardGame.gamePath+"js/models/Settings.js",cardGame.gamePath+"js/models/Rules.js",cardGame.gamePath+"js/models/CardOnBoard.js",cardGame.gamePath+"js/models/GameState.js"],function(e,a,t,s){return class{chooseCardAndCase(a,t){"object"==typeof a&&a instanceof s||logger.warning("Expected GameState type");let r={};switch(t){case e.getDifficulties().EASY:r=this.chooseCardAndCaseRandomly(a);break;case e.getDifficulties().NORMAL:r=this.chooseCardAndCaseBasedOnRule(a,"testSimpleRule");break;case e.getDifficulties().HARD:r=this.chooseCardAndCaseBasedOnRule(a,"testAllRules");break;default:logger.debug("[difficulty: "+t+"] does not exist")}return r}chooseCardAndCaseRandomly(e){let a={},t=e.getBoard().getEmptyCases(),s=Math.floor(Math.random()*e.getPlayerPlaying().getDeck().length),r=Math.floor(Math.random()*t.length);return a.card=e.getPlayerPlaying().getCard(s),a.coordinates=t[r],a}chooseCardAndCaseBasedOnRule(e,s){let r={},d=e.getBoard().getEmptyCases(),l=e.getPlayerPlaying().getDeck();if(9===d.length)return this.chooseCardAndCaseRandomly(e);let o=0;for(let n=l.length-1;n>=0;n--)d.forEach(function(d){let g=(new a)[s](e.getBoard(),new t(l[n],e.getPlayerPlaying()),d[0],d[1]);logger.debug("[card: "+l[n].getName()+"; row: "+d[0]+"; col: "+d[1]+"] could flip "+g.length+" cards"),(g.length>o||void 0===r.card)&&(o=g.length,r.coordinates=[d[0],d[1]],r.card=l[n])});return r}}});